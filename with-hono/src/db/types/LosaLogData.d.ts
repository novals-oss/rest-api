/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type { ColumnType } from "kysely";

export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S, I | undefined, U>
  : ColumnType<T, T | undefined, T>;

export interface GAMELOG {
  AccountIDX: number;
  CpType: number;
  EventType: number;
  LogIDX: Generated<number>;
  LogType: number;
  ObjCode: number;
  Param1: number;
  Param2: number;
  Param3: number;
  Param4: number;
  Param5: string;
  RegDate: Date;
  TBLIDX: number;
  UserExp: number;
  UserID: string;
  UserIP: string;
  UserLevel: number;
  UserName: string;
}

export interface LogBuyGoldItem {
  accountIDX: number;
  amount: Generated<number>;
  idx: Generated<number>;
  itemCode: Generated<number>;
  itemType: Generated<number>;
  nickname: string;
  note: string;
  regDate: Generated<Date>;
  userIP: string;
}

export interface LogBuyItem {
  amount: Generated<number>;
  applyType: string;
  buyplace: Generated<number | null>;
  buyType: Generated<number>;
  classType: Generated<number>;
  decoCode: Generated<number>;
  decoType: Generated<number>;
  idx: Generated<number>;
  itemType: Generated<number>;
  kindred: Generated<number>;
  modeType: Generated<number>;
  note: string | null;
  playType: Generated<number>;
  regDate: Generated<Date>;
  sub1Type: Generated<number>;
  sub2Type: Generated<number>;
  userID: string;
  userIP: string;
}

export interface LogBuyItemAccessory {
  accountIDX: number;
  amount: Generated<number>;
  eventType: Generated<number>;
  idx: Generated<number>;
  itemCode: Generated<number>;
  nickName: string;
  note: string | null;
  regDate: Generated<Date>;
  userIP: string;
  userLevel: Generated<number>;
}

export interface LogBuyItemClass {
  accountIDX: number;
  amount: Generated<number>;
  classType: Generated<number>;
  eventType: Generated<number>;
  idx: Generated<number>;
  limitType: Generated<number>;
  nickName: string;
  note: string | null;
  regDate: Generated<Date>;
  userIP: string;
  userLevel: Generated<number>;
}

export interface LogBuyItemCostume {
  accountIDX: number;
  amount: Generated<number>;
  eventType: Generated<number>;
  idx: Generated<number>;
  itemCode: Generated<number>;
  nickName: string;
  note: string;
  regDate: Generated<Date>;
  userIP: string;
  userLevel: Generated<number>;
}

export interface LogBuyItemDecoration {
  accountIDX: number;
  amount: Generated<number>;
  classType: Generated<number>;
  eventType: Generated<number>;
  idx: Generated<number>;
  itemCode: Generated<number>;
  itemType: Generated<number>;
  kindred: Generated<number>;
  nickName: string;
  note: string | null;
  regDate: Generated<Date>;
  userIP: string;
}

export interface LogBuyItemEquip {
  accountIDX: number;
  amount: Generated<number>;
  eventType: Generated<number>;
  idx: Generated<number>;
  itemCode: Generated<number>;
  itemType: Generated<number>;
  limitDate: Generated<number>;
  machineType: Generated<number>;
  nickName: string;
  note: string | null;
  regDate: Generated<Date>;
  reinforce: Generated<number>;
  userIP: string;
}

export interface LogBuyItemGold {
  accountIDX: number;
  amount: Generated<number>;
  billingID: string | null;
  buyType: Generated<number>;
  cpType: Generated<number>;
  idx: Generated<number>;
  itemCode: Generated<number>;
  itemType: Generated<number>;
  itemValue: Generated<number>;
  nickName: string;
  note: string | null;
  regDate: Generated<Date>;
  userIP: string;
  userLevel: Generated<number>;
}

export interface LogBuyItemSbox {
  accountIDX: number;
  amount: Generated<number>;
  billingID: Generated<string>;
  cpType: Generated<number>;
  idx: Generated<number>;
  limitDate: number;
  logType: Generated<number>;
  nickName: string;
  note: string | null;
  presentType: Generated<number>;
  regDate: Generated<Date>;
  userIP: string;
  userLevel: Generated<number>;
  value1: Generated<number>;
  value2: Generated<number>;
}

export interface LogBuyItemSpecial {
  accountIDX: number;
  amount: Generated<number>;
  eventType: Generated<number>;
  idx: Generated<number>;
  itemType: Generated<number>;
  itemValue: Generated<number>;
  nickName: string;
  note: string;
  regDate: Generated<Date>;
  userIP: string;
}

export interface LogDataAccessoryUpgrade {
  accountIDX: number;
  idx: Generated<number>;
  itemCode: Generated<number>;
  logType: Generated<number>;
  nickName: string;
  nowUpgradeValue: Generated<number>;
  pieceCode: Generated<number>;
  regDate: Generated<Date>;
  resultUpgradeValue: Generated<number>;
  userLevel: Generated<number>;
}

export interface LogDataAwake {
  accountIDX: number;
  awakeType: Generated<number>;
  classType: Generated<number>;
  idx: Generated<number>;
  nickName: string;
  pieceCode: Generated<number>;
  pieceUseCount: Generated<number>;
  regDate: Generated<Date>;
  userLevel: Generated<number>;
}

export interface LogDataCardmatching {
  AccountIDX: number;
  idx: Generated<number>;
  ItemCode: Generated<number>;
  ItemType: Generated<number>;
  ItemValue: Generated<number>;
  LogType: Generated<number>;
  MissionMark1: Generated<number>;
  MissionMark2: Generated<number>;
  MissionType: Generated<number>;
  NickName: string;
  RegDate: Generated<Date>;
  RewardStep: Generated<number>;
  UserLevel: number;
  UserMark1: Generated<number>;
  UserMark2: Generated<number>;
}

export interface LogDataCharacter {
  accountIDX: number;
  characterType: Generated<number>;
  death: Generated<number>;
  idx: Generated<number>;
  kill: Generated<number>;
  modeType: Generated<number>;
  nickName: string;
  playTime: Generated<number>;
  playType: Generated<number>;
  regDate: Generated<Date>;
  subType1: Generated<number>;
  subType2: Generated<number>;
}

export interface LogDataCheating {
  accountIDX: number;
  idx: Generated<number>;
  mainIDX: Generated<number>;
  regDate: Generated<Date>;
  subIDX: Generated<number>;
  userID: string;
  userIP: string;
  userLevel: Generated<number>;
}

export interface LogDataClover {
  accountIDX: number;
  CloverCount: Generated<number>;
  eventType: Generated<number>;
  friendIDX: Generated<number>;
  idx: Generated<number>;
  regDate: Generated<Date>;
}

export interface LogDataCustomMedal {
  AccountIDX: Generated<number>;
  BasicGrowth1: Generated<number>;
  BasicGrowth2: Generated<number>;
  BasicGrowth3: Generated<number>;
  BasicGrowth4: Generated<number>;
  idx: Generated<number>;
  LimitDate: Date;
  LimitType: Generated<number>;
  LogType: Generated<number>;
  MedalCode: Generated<number>;
  MedalIDX: Generated<number>;
  regDate: Generated<Date>;
  SkillGrowth1: Generated<number>;
  SkillGrowth2: Generated<number>;
  SkillGrowth3: Generated<number>;
  SkillGrowth4: Generated<number>;
}

export interface LogDataDiceGame {
  AccountIDX: number;
  Board: number;
  BoardCountUsed: number;
  DiceCountUsed: number;
  EndTime: Date | null;
  GameState: number;
  Position: number;
  RewardCountUsed: number;
  RewardStep01: number;
  RewardStep02: number;
  RewardStep03: number;
  RewardStep04: number;
  RewardStep05: number;
  RewardStep06: number;
  RewardStep07: number;
  RewardStep08: number;
  RewardStep09: number;
  RewardStep10: number;
  StartTime: Date | null;
  Trace01: number;
  Trace02: number;
  Trace03: number;
  Trace04: number;
  Trace05: number;
  Trace06: number;
}

export interface LogDataExcavatingNew {
  AccountIDX: number;
  CExpert: number;
  CLevel: number;
  CType: number;
  ExEXP: number;
  ExLevel: number;
  Index: number;
  LogIDX: Generated<number>;
  LogType: number;
  MapID: number;
  Mutiple: number;
  Price: number;
  RCount: number;
  RegDate: Date;
  ResultMoney: number;
  RewardType: number;
  UserID: string;
  UserIP: string;
  UserName: string;
  X: number;
  Y: number;
  Z: number;
}

export interface LogDataGearUpgrade {
  accountIDX: number;
  gearCode: Generated<number>;
  idx: Generated<number>;
  logType: Generated<number>;
  nickName: string;
  nowUpgradeValue: Generated<number>;
  pieceCode: Generated<number>;
  regDate: Generated<Date>;
  resultUpgradeValue: Generated<number>;
  userLevel: Generated<number>;
}

export interface LogDataLeaguePresent {
  accountIDX: number;
  currentRound: number;
  idx: Generated<number>;
  leagueIDX: Generated<number>;
  nickName: string;
  presentCode1: Generated<number>;
  presentCode2: Generated<number>;
  presentCode3: Generated<number>;
  presentCode4: Generated<number>;
  regDate: Generated<Date>;
}

export interface LogDataLocalinfo {
  accountIDX: number;
  cpu: string;
  directx: string;
  gpu: string;
  hdd_serial: Generated<string | null>;
  idx: Generated<number>;
  ie: string;
  losaResolution: Generated<string>;
  memory: string;
  nickName: string;
  os: string;
  regDate: Generated<Date>;
  screenType: Generated<number>;
  systemResolution: Generated<string>;
  userIP: string;
  userLevel: Generated<number>;
}

export interface LogDataMatchmode {
  AccountIDX: number;
  idx: Generated<number>;
  logType: Generated<number>;
  MatchTime: Generated<number>;
  nickName: string;
  regDate: Generated<Date>;
  RoomNumber: Generated<number>;
  Tier1: number;
  Tier2: number;
  userLevel: number;
}

export interface LogDataMatchmode2 {
  AccountIDX: number;
  idx: Generated<number>;
  logType: Generated<number>;
  MatchPoint: Generated<number>;
  MatchTime: Generated<number>;
  MatchType: Generated<number>;
  nickName: string;
  regDate: Generated<Date>;
  RoomNumber: Generated<number>;
  Tier1: number;
  Tier2: number;
  userLevel: number;
  WinningStreakCount: Generated<number>;
}

export interface LogDataMedal {
  accountIDX: number;
  idx: Generated<number>;
  limitType: number;
  logType: Generated<number>;
  medalType: number;
  nickName: string;
  regDate: Generated<Date>;
}

export interface LogDataMedalExtend {
  accountIDX: number;
  classType: Generated<number>;
  idx: Generated<number>;
  logType: Generated<number>;
  nickName: string;
  period: Generated<number>;
  regDate: Generated<Date>;
  slotNum: Generated<number>;
  userLevel: Generated<number>;
}

export interface LogDataOakbarrel {
  AccountIDX: number;
  idx: Generated<number>;
  ItemCode: Generated<number>;
  ItemType: Generated<number>;
  ItemValue: Generated<number>;
  LogType: Generated<number>;
  NickName: string;
  RegDate: Generated<Date>;
  SwordCount: Generated<number>;
  UserLevel: number;
}

export interface LogDataPcroom {
  accountIDX: number;
  idx: Generated<number>;
  logType: Generated<number>;
  nickName: string;
  pcnum: Generated<number>;
  pcrType: Generated<number>;
  playTime: Generated<number>;
  regDate: Generated<Date>;
  userIP: string;
}

export interface LogDataPeso {
  accountIDX: number;
  idx: Generated<number>;
  logType: Generated<number>;
  nickName: string;
  peso: Generated<number>;
  regDate: Generated<Date>;
}

export interface LogDataPet {
  accountIDX: number;
  idx: Generated<number>;
  itemCode: Generated<number>;
  logNote: string | null;
  logSubType: Generated<number>;
  logType: Generated<number>;
  nickName: string;
  petCode: Generated<number>;
  petExp: Generated<number>;
  petIDX: number;
  petLevel: Generated<number>;
  petRank: Generated<number>;
  regDate: Generated<Date>;
  userLevel: Generated<number>;
}

export interface LogDataPieceDivide {
  accountIDX: number;
  amount: Generated<number>;
  idx: Generated<number>;
  itemCode: Generated<number>;
  itemType: Generated<number>;
  materialCode: Generated<number>;
  nickName: string;
  regDate: Generated<Date>;
  userLevel: Generated<number>;
}

export interface LogDataPieceMix {
  accountIDX: number;
  idx: Generated<number>;
  mixCode: Generated<number>;
  mixType: Generated<number>;
  nickName: string;
  regDate: Generated<Date>;
  resultA: Generated<number>;
  resultB: Generated<number>;
  resultType: Generated<number>;
  useA: Generated<number>;
  useB: Generated<number>;
  userLevel: Generated<number>;
}

export interface LogDataPieceObtain {
  accountIDX: number;
  amount: Generated<number>;
  idx: Generated<number>;
  nickName: string;
  playTime: Generated<number>;
  regDate: Generated<Date>;
  step: Generated<number>;
  userLevel: Generated<number>;
}

export interface LogDataPlay {
  accountIDX: number;
  blueTeamMember: Generated<number>;
  contribution: Generated<number>;
  death: Generated<number>;
  deathTime: Generated<number>;
  idx: Generated<number>;
  kill: Generated<number>;
  logType: Generated<number>;
  lose: Generated<number>;
  modeType: Generated<number>;
  nickName: string;
  pcnum: Generated<number>;
  peso: Generated<number>;
  playTime: Generated<number>;
  playType: Generated<number>;
  redTeamMember: Generated<number>;
  regDate: Generated<Date>;
  roomNumber: Generated<number>;
  subType1: Generated<number>;
  subType2: Generated<number>;
  win: Generated<number>;
}

export interface LogDataPlayOld {
  accountIDX: number;
  death: Generated<number>;
  deathTime: Generated<number>;
  idx: Generated<number>;
  kill: Generated<number>;
  logType: Generated<number>;
  lose: Generated<number>;
  modeType: Generated<number>;
  nickName: string;
  pcnum: Generated<number>;
  peso: Generated<number>;
  playTime: Generated<number>;
  playType: Generated<number>;
  regDate: Generated<Date>;
  subType1: Generated<number>;
  subType2: Generated<number>;
  win: Generated<number>;
}

export interface LogDataQuest {
  accountIDX: number;
  idx: Generated<number>;
  logType: Generated<number>;
  mainIDX: Generated<number>;
  nickName: string;
  regDate: Generated<Date>;
  subIDX: Generated<number>;
  userLevel: Generated<number>;
}

export interface LogDataQuestVfun {
  accountIDX: number;
  channelingType: number;
  idx: Generated<number>;
  mainIDX: Generated<number>;
  nickName: string;
  reason: string;
  regDate: Generated<Date>;
  subIDX: Generated<number>;
  success: number;
  userLevel: Generated<number>;
}

export interface LogDataRoominfo {
  BlueLose: Generated<number>;
  BlueTeamMember: Generated<number>;
  BlueWin: Generated<number>;
  idx: Generated<number>;
  logType: Generated<number>;
  ModeSubType: Generated<number>;
  ModeType: Generated<number>;
  playTime: Generated<number>;
  PlayType: Generated<number>;
  RedLose: Generated<number>;
  RedTeamMember: Generated<number>;
  RedWin: Generated<number>;
  RegDate: Generated<Date>;
  RoomNumber: Generated<number>;
  Tier1: Generated<number>;
  Tier2: Generated<number>;
}

export interface LogDataSpiritChange {
  AccountIDX: number;
  CriticalType: number;
  GetSpiritCode: number;
  GetSpiritCount: number;
  idx: Generated<number>;
  NickName: string;
  regDate: Generated<Date>;
  SetSpiritCode: number;
  SetSpiritCount: number;
  UserLevel: number;
}

export interface LogDataSpiritDivide {
  AccountIDX: number;
  CriticalType: number;
  HeroType: number;
  idx: Generated<number>;
  NickName: string;
  regDate: Generated<Date>;
  SoulStoneCount: number;
  SpiritCode: number;
  SpiritCount: number;
  UserLevel: number;
}

export interface LogDataSpiritMix {
  AccountIDX: number;
  HeroType: number;
  idx: Generated<number>;
  NickName: string;
  regDate: Generated<Date>;
  SpiritCode: number;
  SpiritCount: number;
  UnknownSpiritCode: number;
  UnknownSpiritCount: number;
  UserLevel: number;
}

export interface LogDataSpiritObtain {
  AccountIDX: number;
  idx: Generated<number>;
  logType: number;
  NickName: string;
  regDate: Generated<Date>;
  SpiritCode: number;
  SpiritCount: number;
  UserLevel: number;
  Value: number;
}

export interface LogDataSpiritPeso {
  AccountIDX: number;
  DimensionCount: number;
  idx: Generated<number>;
  NickName: string;
  Peso: number;
  PieceCount: number;
  regDate: Generated<Date>;
  UserLevel: number;
}

export interface LogDataTime {
  accountIDX: number;
  idx: Generated<number>;
  logType: Generated<number>;
  nickName: string;
  playTime: Generated<number>;
  regDate: Generated<Date>;
}

export interface LogDataTrade {
  accountIDX: number;
  idx: Generated<number>;
  itemType: Generated<number>;
  logType: Generated<number>;
  nickname: string;
  note: string | null;
  price: Generated<number>;
  regDate: Generated<Date>;
  userIP: string | null;
  value1: Generated<number>;
  value2: Generated<number>;
}

export interface LogDataTutorial {
  accountIDX: number;
  idx: Generated<number>;
  nickName: string;
  playTime: Generated<number>;
  regDate: Generated<Date>;
  step: Generated<number>;
}

export interface LogDefine {
  code: number;
  itemNameEN: string | null;
  itemNameID: string | null;
  itemNameKO: string | null;
  objName: string;
}

export interface LogErrorBilling {
  cpType: Generated<number>;
  errType: Generated<number>;
  idx: Generated<number>;
  note: string;
  regDate: Generated<Date>;
}

export interface LogEventBingo {
  accountIDX: number;
  choiceType: Generated<number>;
  idx: Generated<number>;
  nickName: string;
  number: Generated<number>;
  regDate: Date;
  stateType: Generated<number>;
}

export interface LogEventCash {
  accountIDX: number;
  amount: Generated<number>;
  eventType: Generated<number>;
  idx: Generated<number>;
  itemCode: Generated<number>;
  nickName: string;
  regDate: Generated<Date>;
  userIP: string;
  userLevel: Generated<number>;
}

export interface LogGameConcurrent {
  concurrent: Generated<number>;
  cpType: Generated<number>;
  idx: Generated<number>;
  regDate: Generated<Date>;
  serverID: Generated<number>;
  serverIP: string;
  serverName: string | null;
  serverPort: number;
}

export interface LogPlayCharacter {
  characterType: Generated<number>;
  cnt_kill: Generated<number>;
  cnt_killed: Generated<number>;
  cnt_selfkilled: Generated<number>;
  idx: Generated<number>;
  modeType: Generated<number>;
  playTime: Generated<number>;
  playType: Generated<number>;
  regDate: Generated<Date>;
  sub1Type: Generated<number>;
  sub2Type: Generated<number>;
  userID: string;
}

export interface LogPlayGame {
  basicPeso: Generated<number>;
  cnt_kill: Generated<number>;
  cnt_killed: Generated<number>;
  cnt_selfkilled: Generated<number>;
  deathTime: Generated<number>;
  idx: Generated<number>;
  logType: Generated<number>;
  modeType: Generated<number>;
  playTime: Generated<number>;
  playType: Generated<number>;
  regDate: Generated<Date>;
  sub1Type: Generated<number>;
  sub2Type: Generated<number>;
  total_contribute: Generated<number>;
  total_emblem: Generated<number>;
  total_lose: Generated<number>;
  total_peso: Generated<number>;
  total_play_num: Generated<number>;
  total_round: Generated<number>;
  total_win: Generated<number>;
  userID: string;
}

export interface LogPlayTutorial {
  idx: Generated<number>;
  playTime: Generated<number>;
  regDate: Generated<Date>;
  step: Generated<number>;
  userID: string;
}

export interface LogPresent {
  accountIDX: number;
  eventType: Generated<number>;
  idx: Generated<number>;
  nickname: string;
  note: string | null;
  presentType: Generated<number>;
  receiveIDX: number;
  regDate: Generated<Date>;
  userIP: string;
  value1: Generated<number>;
  value2: Generated<number>;
}

export interface LogSystemInfo {
  concurrent: number | null;
  cpu: number | null;
  idx: Generated<number>;
  logType: string | null;
  memory: number | null;
  regDate: Generated<Date>;
  serverIP: string | null;
}

export interface LogTempBckim {
  accountIDX: number | null;
  regdate: Date | null;
  regdate_str: string | null;
}

export interface LogTracePrisonerOption {
  BlueMaxMember: Generated<number>;
  BlueMember: Generated<number>;
  closedRoomOption: Generated<number>;
  idx: Generated<number>;
  RedMaxMember: Generated<number>;
  RedMember: Generated<number>;
  regDate: Generated<Date>;
  TeamMixOption: Generated<number>;
  userModeOption: Generated<number>;
}

export interface LogTracePrisonerStart {
  idx: Generated<number>;
  ListSelect: Generated<number>;
  MakeRoom: Generated<number>;
  QuickStart: Generated<number>;
  RegDate: Generated<Date>;
  ServerID: Generated<number>;
}

export interface LogUseItem {
  accountIDX: number;
  colIDX: Generated<number>;
  idx: Generated<number>;
  itemCode: Generated<number>;
  itemType: Generated<number>;
  nickname: string;
  note: string | null;
  regDate: Generated<Date>;
  rowIDX: Generated<number>;
  userIP: string;
}

export interface LosaGamelogTEMPQUESTLOGINBCKIM {
  AccountIDX: number;
  progress: Generated<number | null>;
  result: Generated<number | null>;
  Term_05220612: Generated<number | null>;
  Term_05220619: Generated<number | null>;
  Term_06120619: Generated<number | null>;
}

export interface LosaGamelogTEMPQUESTLOGINBCKIMLogdate {
  AccountIDX: number;
  logincnt: number;
}

export interface LosaGamelogTEMPQUESTLOGINBCKIMProgress {
  AccountIDX: number;
  progress: number | null;
}

export interface SQLERRORLOG {
  AccountIDX: number;
  ErrorID: Generated<number>;
  ErrorLine: number | null;
  ErrorMessage: string;
  ErrorNo: number;
  ErrorProcedure: string | null;
  ErrorServerity: number | null;
  ErrorState: number | null;
  ErrorTime: Generated<Date>;
}

export interface TBLLOGHACK {
  AccountIDX: number;
  idx: Generated<number>;
  ItemCode: Generated<number>;
  ItemType: Generated<number>;
  ItemValue: Generated<number>;
  ModeType: Generated<number>;
  NickName: string;
  PlayType: Generated<number>;
  RegDate: Generated<Date>;
  SubType1: Generated<number>;
  SubType2: Generated<number>;
  UserLevel: Generated<number>;
}

export interface TBLLOGHACKMESSAGE {
  AccountIDX: number;
  idx: Generated<number>;
  Msg: string;
  RegDate: Generated<Date>;
}

export interface LosaLogData {
  GAME_LOG: GAMELOG;
  Log_buy_gold_item: LogBuyGoldItem;
  Log_buy_item: LogBuyItem;
  log_buy_item_accessory: LogBuyItemAccessory;
  log_buy_item_class: LogBuyItemClass;
  log_buy_item_costume: LogBuyItemCostume;
  log_buy_item_decoration: LogBuyItemDecoration;
  log_buy_item_equip: LogBuyItemEquip;
  log_buy_item_gold: LogBuyItemGold;
  log_buy_item_sbox: LogBuyItemSbox;
  log_buy_item_special: LogBuyItemSpecial;
  log_data_accessory_upgrade: LogDataAccessoryUpgrade;
  log_data_awake: LogDataAwake;
  log_data_cardmatching: LogDataCardmatching;
  log_data_character: LogDataCharacter;
  log_data_cheating: LogDataCheating;
  log_data_clover: LogDataClover;
  log_data_custom_medal: LogDataCustomMedal;
  log_data_DiceGame: LogDataDiceGame;
  log_data_excavating_new: LogDataExcavatingNew;
  log_data_gear_upgrade: LogDataGearUpgrade;
  log_data_league_present: LogDataLeaguePresent;
  log_data_localinfo: LogDataLocalinfo;
  log_data_matchmode: LogDataMatchmode;
  log_data_matchmode2: LogDataMatchmode2;
  log_data_medal: LogDataMedal;
  log_data_medal_extend: LogDataMedalExtend;
  log_data_oakbarrel: LogDataOakbarrel;
  log_data_pcroom: LogDataPcroom;
  log_data_peso: LogDataPeso;
  log_data_pet: LogDataPet;
  log_data_piece_divide: LogDataPieceDivide;
  log_data_piece_mix: LogDataPieceMix;
  log_data_piece_obtain: LogDataPieceObtain;
  log_data_play: LogDataPlay;
  log_data_play_old: LogDataPlayOld;
  log_data_quest: LogDataQuest;
  log_data_quest_vfun: LogDataQuestVfun;
  log_data_roominfo: LogDataRoominfo;
  log_data_spirit_change: LogDataSpiritChange;
  log_data_spirit_divide: LogDataSpiritDivide;
  log_data_spirit_mix: LogDataSpiritMix;
  log_data_spirit_obtain: LogDataSpiritObtain;
  log_data_spirit_peso: LogDataSpiritPeso;
  log_data_time: LogDataTime;
  log_data_trade: LogDataTrade;
  log_data_tutorial: LogDataTutorial;
  log_define: LogDefine;
  log_error_billing: LogErrorBilling;
  log_event_bingo: LogEventBingo;
  log_event_cash: LogEventCash;
  Log_game_concurrent: LogGameConcurrent;
  Log_play_character: LogPlayCharacter;
  Log_play_game: LogPlayGame;
  Log_play_tutorial: LogPlayTutorial;
  log_present: LogPresent;
  Log_system_info: LogSystemInfo;
  log_temp_bckim: LogTempBckim;
  log_trace_prisoner_option: LogTracePrisonerOption;
  log_trace_prisoner_start: LogTracePrisonerStart;
  Log_use_item: LogUseItem;
  LosaGamelog_TEMP_QUEST_LOGIN_BCKIM: LosaGamelogTEMPQUESTLOGINBCKIM;
  LosaGamelog_TEMP_QUEST_LOGIN_BCKIM_logdate: LosaGamelogTEMPQUESTLOGINBCKIMLogdate;
  LosaGamelog_TEMP_QUEST_LOGIN_BCKIM_progress: LosaGamelogTEMPQUESTLOGINBCKIMProgress;
  SQL_ERROR_LOG: SQLERRORLOG;
  TBL_LOG_HACK: TBLLOGHACK;
  TBL_LOG_HACK_MESSAGE: TBLLOGHACKMESSAGE;
}
